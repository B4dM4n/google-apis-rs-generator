
use clap::{Arg, AppSettings, App, SubCommand};
use default_boxed::DefaultBoxed;

#[derive(DefaultBoxed)]
struct Outer<'a, 'b> {
    inner: HeapApp<'a, 'b> 
}

struct HeapApp<'a, 'b> {
    app: App<'a, 'b>
}

impl<'a, 'b> Default for HeapApp<'a, 'b> {
    fn default() -> Self {
        let mut {{app_ident}} = App::new("{{program_name}}")
            .setting(clap::AppSettings::ColoredHelp)
            .author("Sebastian Thiel <byronimo@gmail.com>")
            .version("{{cli_version}}")
            .about({{ description | rust_string_literal }})
            .after_help("All documentation details can be found at <TODO figure out URL>")
            .arg(Arg::with_name("scope")
                .long("scope")
                .help("Specify the authentication method should be executed in. Each scope requires the user to grant this application permission to use it. If unset, it defaults to the shortest scope url for a particular method.")
                .multiple(true)
                .takes_value(true))
            .arg(Arg::with_name("folder")
                .long("config-dir")
                .help("A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation." )
                .multiple(false)
                .takes_value(true))
            .arg(Arg::with_name("debug")
                .long("debug")
                .help("Provide more output to aid with debugging")
                .multiple(false)
                .takes_value(false));

        {%- for r in resources %}
        let mut {{r.ident}} = SubCommand::with_name("{{r.name}}")
                        .setting(AppSettings::ColoredHelp)
                        .about({{r.about | rust_string_literal }});
            {%- for m in r.methods %}
        {
            let mcmd = SubCommand::with_name("{{m.name}}")
            {%- if m.about -%}
                .about({{ m.about | rust_string_literal }});
            {%- endif %};
            {{r.ident}} = {{r.ident}}.subcommand(mcmd);
        }
            {%- endfor %}
        {%- endfor -%}

        {%- for r in resources reversed %}
            {{r.parent_ident}} = {{r.parent_ident}}.subcommand({{r.ident}});
        {%- endfor %}

        Self {
            {{app_ident}}
        }
    }
}